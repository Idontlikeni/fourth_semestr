`timescale 1ns / 1ps

module testbench();
    reg a=0;
    reg b=0;
    reg c=0;
    reg clk=0;
    wire [1:0] mili_state;
    wire [2:0] moore_state;
    
    wire mili_out;
    wire moore_out;
    
    always #10 clk = ~clk;
    initial begin
        c = 1; // xx1 (1)
        #20 a=0; c=0; // 0x0 (2)
        #20 c=0; // xx0 (3)
        #20 b=0; c=1; // x01 (3)
        #20 c=0; // xx0 (2)
        #20 c=1; // xx1 (1)
        #20 a=1;// 1xx (1)
        #20 a=0; c=1; // 0x1 (0)
        #20 c=0;// xx0 (3)
        #20 b=1;c=1;// x11 (0)
        #50 $stop;
    end
        
    mili M1(.clk(clk), .a(a), .b(b), .c(c), .state(mili_state), .d(mili_out));
    moore M2(.clk(clk), .a(a), .b(b), .c(c), .state(moore_state), .d(moore_out));
    //Moore M2(.a(a), .b(b), .c(c),.clk(clk), .d(moore_out));
endmodule

//////////////////////////////////////////////////////////////////////////////////////

`timescale 1ns / 1ps

module mili(
    input clk, a, b, c,
    output reg [1:0] state,
    output reg d
    );
    initial begin
        state = 0;
    end
    always@(posedge clk)
    begin
        case (state)
            2'd0:begin
                if(c)state <= 2'd1;
                else if(~c)state <= 2'd3;
                d <= a & b;
            end
            2'd1:begin
                if(a)state <= 2'd1;
                else if(~a && ~c)state <= 2'd2;
                else if(~a && c)state <= 2'd0;
                d = (~a & b) | (a & ~b);
            end
            2'd2:begin
                if(~c)state <= 2'd3;
                else if(c)state <= 2'd1;
                d = (~a & c) | (a & ~c);
            end
            2'd3:begin
                if(~c)state <= 2'd2;
                else if(b && c)state <= 2'd0;
                else if(~b && c)state <= 2'd3;
                d = ~a | c;
            end
        endcase
    end
endmodule

//////////////////////////////////////////////////////////////////////////////////

`timescale 1ns / 1ps

module moore#
(parameter
S0_0=3'b000, S0_1=3'b001,
S1_0=3'b010, S1_1=3'b011,
S2_0=3'b100, S2_1=3'b101,
S3_0=3'b110, S3_1=3'b111)
(input clk,a,b,c,
output reg [2:0] state,
output reg d);
    reg [2:0] new_state=0;
    initial begin
        state = 0;
    end
    always @(posedge clk)
    begin
        state = new_state;
        casex(state)
            3'bxx1: d = 1'b1;
            3'bxx0: d = 1'b0;
        endcase
        casex({state,a,b,c})
            {S0_0, 3'b000}, {S0_1, 3'b000}: new_state = S3_0;
            {S0_0, 3'b001}, {S0_1, 3'b001}: new_state = S1_0;
            {S0_0, 3'b010}, {S0_1, 3'b010}: new_state = S3_0;
            {S0_0, 3'b011}, {S0_1, 3'b011}: new_state = S1_0;
            {S0_0, 3'b100}, {S0_1, 3'b100}: new_state = S3_0;
            {S0_0, 3'b101}, {S0_1, 3'b101}: new_state = S1_1;
            {S0_0, 3'b110}, {S0_1, 3'b110}: new_state = S3_0;
            {S0_0, 3'b111}, {S0_1, 3'b111}: new_state = S1_1;
            {S1_0, 3'b000}, {S1_1, 3'b000}: new_state = S2_0;
            {S1_0, 3'b001}, {S1_1, 3'b001}: new_state = S0_0;
            {S1_0, 3'b010}, {S1_1, 3'b010}: new_state = S2_1;
            {S1_0, 3'b011}, {S1_1, 3'b011}: new_state = S0_1;
            {S1_0, 3'b100}, {S1_1, 3'b100}: new_state = S1_1;
            {S1_0, 3'b101}, {S1_1, 3'b101}: new_state = S1_1;
            {S1_0, 3'b110}, {S1_1, 3'b110}: new_state = S1_0;
            {S1_0, 3'b111}, {S1_1, 3'b111}: new_state = S1_0;
            {S2_0, 3'b000}, {S2_1, 3'b000}: new_state = S3_0;
            {S2_0, 3'b001}, {S2_1, 3'b001}: new_state = S1_1;
            {S2_0, 3'b010}, {S2_1, 3'b010}: new_state = S3_0;
            {S2_0, 3'b011}, {S2_1, 3'b011}: new_state = S1_1;
            {S2_0, 3'b100}, {S2_1, 3'b100}: new_state = S3_1;
            {S2_0, 3'b101}, {S2_1, 3'b101}: new_state = S1_0;
            {S2_0, 3'b110}, {S2_1, 3'b110}: new_state = S3_1;
            {S2_0, 3'b111}, {S2_1, 3'b111}: new_state = S1_0;
            {S3_0, 3'b000}, {S3_1, 3'b000}: new_state = S2_1;
            {S3_0, 3'b001}, {S3_1, 3'b001}: new_state = S3_1;
            {S3_0, 3'b010}, {S3_1, 3'b010}: new_state = S2_1;
            {S3_0, 3'b011}, {S3_1, 3'b011}: new_state = S0_1;
            {S3_0, 3'b100}, {S3_1, 3'b100}: new_state = S2_0;
            {S3_0, 3'b101}, {S3_1, 3'b101}: new_state = S3_1;
            {S3_0, 3'b110}, {S3_1, 3'b110}: new_state = S2_0;
            {S3_0, 3'b111}, {S3_1, 3'b111}: new_state = S0_1;
        endcase
    end
endmodule